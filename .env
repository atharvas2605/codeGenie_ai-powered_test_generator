#OpenAI Credentials
API_ENDPOINT=""         # Azure OpenAI API endpoint, e.g., https://your-resource-name.openai.azure.com/
API_KEY=""              # Azure OpenAI API key
API_VERSION=""          # e.g., 2024-04-01-preview

# Model Configurations
MODEL_TEMPERATURE=0.5                     # Temperature for response generation (float value), e.g., 0.5
MODEL_TYPE="gpt-4.1-mini"                 # Model type to use, e.g., gpt-35-turbo-0301
MODEL_MAX_TOKENS=16000                    # Maximum number of tokens (int value) for e.g., - 1500

#Solution URL
TARGET_URL="https://example.com"          # The URL of the web application to be tested

# Prompts for generating functional test cases and UI automation scripts
# Note: Do not modify unless necessary.
#       Changes to these prompts will alter the output generated by the LLM.

PROMPT_FUNCTIONAL_TESTCASE = "
You are a QA automation expert with deep experience in manual functional testing and UI automation using Playwright and Python.
Given the following Playwright-based UI test script:
Generate 20 additional functional test cases.

Requirements:
- Each test must include:
  - Testcase number
  - Title
  - Steps
  - Expected Result
- Cover positive cases, negative cases, edge cases, and commonly missed scenarios.
- Do NOT use or expose actual password credentials from the script; instead, reference them as 'Valid Credentials' or 'Invalid Credentials'.
- Additionally, provide a checklist of potential bugs related to the tested functionality.

Important:
- Do NOT include any explanations, summaries, or introductory/concluding text.
- Only output the test cases and the checklist in the following format:

Test Case 1: (Positive Case)
Title:
Steps:
1.
2.
Assertions:

Test Case 2: (Negative Case)
Title:
Steps:
1.
2.
Assertions:

Test Case 3: (Edge Case)
Title:
Steps:
1.
2.
Assertions:
-

Checklist of Potential Bugs:
-
-
-
"

PROMPT_GENERATE_UI_AUTO_SCRIPT="You are a senior test automation engineer specializing in Playwright with Python.
Refactor and stabilize the following Playwright UI automation script so it is clean, reliable, and CI-ready.

**Important formatting requirement:**
- The output must be **only** the complete Python script as plain text.
- Do **NOT** wrap the script in triple backticks (```), do **NOT** use markdown fences (like ```python), and do **NOT** include any explanation or comments outside the code.
- The code must be directly runnable in CI without manual edits.

### Refactoring objectives:
1. Improve stability and reliability:
  - **Keep and reuse the existing/raw playwright locators and functions as provided.**
  - **Add an explicit wait (e.g., time.sleep(25)) immediately only after every page.goto(...) which navigates to the solution URL.**
  - Add proper waits where needed (e.g. expect).
  - Handle dynamic content and flaky steps carefully.
  - **If the base script contains get_by_role('checkbox', name='Press spacebar to toggle the').check(), then proactively replace it with get_by_role('checkbox', name='Press spacebar to toggle the').nth(0).check() so each locator matches exactly one element.**
  - **If the base script contains get_by_role('gridcell', name='Press spacebar to toggle the').click(), then proactively replace it with get_by_role('gridcell', name='Press spacebar to toggle the').nth(0).click() for every occurrence so each locator matches exactly one element.**
  - Do NOT include page.wait_for_selector anywhere in the output.

 2. Test data management:
  - **Extract all hardcoded values used in .fill() methods into variables at the top of each function.**
  - **Replace all .fill('hardcoded_value') calls with .fill(variable_name).**
  - **For forms with multiple fields, group related data into logical variable names.**

3. Code quality:
  - Refactor the script into separate functions that match logical test flows or user performed scenarios to improve clarity and maintainability.
  - Do NOT create generic helper or utility functions (e.g., click_and_fill(), click_nth_element()) — always call the raw playwright locators and methods directly inside each test flow function
  - **Do NOT remove, skip, summarize, or merge any lines from the original script. Preserve every line exactly as is, including all repetitive calls, except only refactor by grouping logically into scenario functions.**

4. Add meaningful assertions (SAFE mode):
  - Only add assertions if they check for elements or states that are clearly stable across environments (e.g., expect(locator).to_be_visible()).
  - Do NOT add assertions for page.title(), page.url, or any values that may vary between environments unless they already exist in the base script.
  - Keep all existing assertions from the base script exactly as-is.
  - Avoid adding hardcoded values for dynamic content such as timestamps, IDs, or environment-specific text.

5. Expand coverage:
  - Include edge cases, invalid inputs, or alternate flows.
  - **Do NOT create empty or placeholder functions. If you do not have additional test cases to add, simply remove the empty function instead of leaving it in the output.**

### Additional important requirements:
- Do **not** include markdown formatting, fenced code blocks (like python ``` code ```), or any explanation in the output — provide **only** the final, complete, runnable Python script.
- **Keep the original/raw playwright locators and functions instead of replacing them with AI-generated ones.**
- **Do NOT modify any locators, selectors, or element identifiers.**
- All locators in the original/raw script must be preserved exactly as they appear, including get_by_label, get_by_placeholder, get_by_test_id, get_by_role, etc.
- **Do NOT replace get_by_label(...) with get_by_role(...) or any other variant.**
- **The code must be directly runnable in CI without manual edits.**
- Wrap the main script call inside: if __name__ == \"__main__\": to avoid auto-execution when imported or picked by test runners.

### Tech Stack:
- Playwright with Python
"